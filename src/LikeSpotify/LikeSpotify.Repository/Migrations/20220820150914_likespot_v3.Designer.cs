// <auto-generated />
using System;
using LikeSpotify.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LikeSpotify.Repository.Migrations
{
    [DbContext(typeof(LikeSpotifyContext))]
    [Migration("20220820150914_likespot_v3")]
    partial class likespot_v3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LikeSpotify.Domain.Album.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArtistaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataLancamento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ArtistaId");

                    b.ToTable("Albuns", (string)null);
                });

            modelBuilder.Entity("LikeSpotify.Domain.Album.Artista", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<bool>("E_Banda")
                        .HasColumnType("bit");

                    b.Property<string>("Foto")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Artista", (string)null);
                });

            modelBuilder.Entity("LikeSpotify.Domain.Album.Midia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Ordem")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Midia", (string)null);
                });

            modelBuilder.Entity("LikeSpotify.Domain.Conta.Playlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Ordem_Execucao")
                        .HasColumnType("int");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Playlists", (string)null);
                });

            modelBuilder.Entity("LikeSpotify.Domain.Conta.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DtNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("MidiaPlaylist", b =>
                {
                    b.Property<Guid>("MidiasId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlaylistsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MidiasId", "PlaylistsId");

                    b.HasIndex("PlaylistsId");

                    b.ToTable("MidiaPlaylist");
                });

            modelBuilder.Entity("LikeSpotify.Domain.Album.Album", b =>
                {
                    b.HasOne("LikeSpotify.Domain.Album.Artista", null)
                        .WithMany("Albuns")
                        .HasForeignKey("ArtistaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LikeSpotify.Domain.Album.Midia", b =>
                {
                    b.HasOne("LikeSpotify.Domain.Album.Album", null)
                        .WithMany("Midias")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("LikeSpotify.Domain.Album.ValueObject.Duracao", "Tempo_Midia", b1 =>
                        {
                            b1.Property<Guid>("MidiaId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Valor")
                                .HasColumnType("int")
                                .HasColumnName("Tempo_Midia");

                            b1.HasKey("MidiaId");

                            b1.ToTable("Midia");

                            b1.WithOwner()
                                .HasForeignKey("MidiaId");
                        });

                    b.Navigation("Tempo_Midia");
                });

            modelBuilder.Entity("LikeSpotify.Domain.Conta.Playlist", b =>
                {
                    b.HasOne("LikeSpotify.Domain.Conta.Usuario", null)
                        .WithMany("Playlists")
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("LikeSpotify.Domain.Conta.Usuario", b =>
                {
                    b.OwnsOne("LikeSpotify.Domain.Conta.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(1024)
                                .HasColumnType("varchar(1024)")
                                .HasColumnName("Email");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuarios");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.OwnsOne("LikeSpotify.Domain.Conta.ValueObjects.Password", "Password", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Password");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuarios");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.Navigation("Email");

                    b.Navigation("Password");
                });

            modelBuilder.Entity("MidiaPlaylist", b =>
                {
                    b.HasOne("LikeSpotify.Domain.Album.Midia", null)
                        .WithMany()
                        .HasForeignKey("MidiasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LikeSpotify.Domain.Conta.Playlist", null)
                        .WithMany()
                        .HasForeignKey("PlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LikeSpotify.Domain.Album.Album", b =>
                {
                    b.Navigation("Midias");
                });

            modelBuilder.Entity("LikeSpotify.Domain.Album.Artista", b =>
                {
                    b.Navigation("Albuns");
                });

            modelBuilder.Entity("LikeSpotify.Domain.Conta.Usuario", b =>
                {
                    b.Navigation("Playlists");
                });
#pragma warning restore 612, 618
        }
    }
}
